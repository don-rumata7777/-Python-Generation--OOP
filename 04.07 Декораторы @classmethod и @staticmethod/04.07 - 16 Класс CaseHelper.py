# "–ü–æ–∫–æ–ª–µ–Ω–∏–µ Python": –û–û–ü
# 4.7 –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã @classmethod –∏ @staticmethod

# –ö–ª–∞—Å—Å CaseHelper üå∂Ô∏èüå∂Ô∏è

# Snake Case ‚Äî —Å—Ç–∏–ª—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Å–æ—Å—Ç–∞–≤–Ω—ã—Ö —Å–ª–æ–≤, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ —Ä–∞–∑–¥–µ–ª—è—é—Ç—Å—è —Å–∏–º–≤–æ–ª–æ–º 
# –Ω–∏–∂–Ω–µ–≥–æ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è (_) –∏ –Ω–µ –∏–º–µ—é—Ç –ø—Ä–æ–±–µ–ª–æ–≤ –≤ –∑–∞–ø–∏—Å–∏, –ø—Ä–∏—á—ë–º –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –ø–∏—à–µ—Ç—Å—è —Å 
# –º–∞–ª–µ–Ω—å–∫–æ–π –±—É–∫–≤—ã. –ù–∞–ø—Ä–∏–º–µ—Ä, bee_geek –∏ hello_world.

# Upper Camel Case ‚Äî —Å—Ç–∏–ª—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Å–æ—Å—Ç–∞–≤–Ω—ã—Ö —Å–ª–æ–≤, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ –ø–∏—à—É—Ç—Å—è —Å–ª–∏—Ç–Ω–æ 
# –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤, –ø—Ä–∏ —ç—Ç–æ–º –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –ø–∏—à–µ—Ç—Å—è —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã. –ù–∞–ø—Ä–∏–º–µ—Ä, BeeGeek –∏ 
# HelloWorld.

# –†–µ–∞–ª–∏–∑—É–π—Ç–µ –∫–ª–∞—Å—Å CaseHelper, –æ–ø–∏—Å—ã–≤–∞—é—â–∏–π –Ω–∞–±–æ—Ä —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏ –≤ —Å—Ç–∏–ª—è—Ö 
# Snake Case –∏ Upper Camel Case. –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–Ω–∏–º–∞—Ç—å –Ω–∏–∫–∞–∫–∏—Ö 
# –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.

# –ö–ª–∞—Å—Å CaseHelper –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —á–µ—Ç—ã—Ä–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç–æ–¥–∞:

# is_snake() ‚Äî –º–µ—Ç–æ–¥, –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Å—Ç—Ä–æ–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π True, –µ—Å–ª–∏ 
# –ø–µ—Ä–µ–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ —Å—Ç–∏–ª–µ Snake Case, –∏–ª–∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
# is_upper_camel() ‚Äî –º–µ—Ç–æ–¥, –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Å—Ç—Ä–æ–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π True, 
# –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ —Å—Ç–∏–ª–µ Upper Camel Case, –∏–ª–∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
# to_snake() ‚Äî –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Å—Ç—Ä–æ–∫—É –≤ —Å—Ç–∏–ª–µ Upper Camel Case,
# –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –µ–µ –≤ —Å—Ç–∏–ª–µ Snake Case –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
# to_upper_camel() ‚Äî –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Å—Ç—Ä–æ–∫—É –≤ —Å—Ç–∏–ª–µ Snake Case, 
# –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –µ–µ –≤ —Å—Ç–∏–ª–µ Upper Camel Case –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
# 
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, 
# —á—Ç–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.

# Sample Input 1:

# print(CaseHelper.is_snake('beegeek'))
# print(CaseHelper.is_snake('bee_geek'))
# print(CaseHelper.is_snake('Beegeek'))
# print(CaseHelper.is_snake('BeeGeek'))

# Sample Output 1:

# True
# True
# False
# False

# Sample Input 2:

# print(CaseHelper.is_upper_camel('beegeek'))
# print(CaseHelper.is_upper_camel('bee_geek'))
# print(CaseHelper.is_upper_camel('Beegeek'))
# print(CaseHelper.is_upper_camel('BeeGeek'))

# Sample Output 2:

# False
# False
# True
# True

# Sample Input 3:

# print(CaseHelper.to_snake('Beegeek'))
# print(CaseHelper.to_snake('BeeGeek'))

# Sample Output 3:

# beegeek
# bee_geek

# Sample Input 4:

# print(CaseHelper.to_upper_camel('beegeek'))
# print(CaseHelper.to_upper_camel('bee_geek'))

# Sample Output 4:

# Beegeek
# BeeGeek

##############################################################################################

# –ü–æ —Å—Å—ã–ª–∫–µ https://inflection.readthedocs.io/en/latest/#module-inflection –¥–æ—Å—Ç—É–ø–µ–Ω –º–æ–¥—É–ª—å, –∫–æ—Ç–æ—Ä—ã–π –º–æ–≥ –±—ã –ø–æ–º–æ—á—å —Ä–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É.

import re

class CaseHelper:
    @staticmethod
    def is_snake(string):
        pattern = r'[a-z]+(_[a-z]+)*'
        return bool(re.fullmatch(pattern, string))

    @staticmethod
    def is_upper_camel(string):
        pattern = r'([A-Z][a-z]+)+'
        return bool(re.fullmatch(pattern, string))
    
    @staticmethod
    def to_snake(string):
        # –ø–æ–∑–∏—Ü–∏—è –≤ —Å—Ç—Ä–æ–∫–µ –≥–¥–µ: –ø–æ–∑–∞–¥–∏ –Ω–µ –Ω–∞—á–∞–ª–æ —Å—Ç—Ä–æ–∫–∏, –∞ –≤–ø–µ—Ä–µ–¥–∏ –∑–∞–≥–ª–∞–≤–Ω–∞—è –±—É–∫–≤–∞
        pattern = r"(?<!^)(?=[A-Z])"
        return re.sub(pattern, '_', string).lower()

    @staticmethod
    def to_upper_camel(string):
        # str.title() - –≤–æ–∑–≤—Ä. —Å—Ç—Ä. –≤ –∫–æ—Ç–æ—Ä–æ–π –≤—Å–µ —Å–ª–æ–≤–∞ —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã
        return string.title().replace('_', '')
